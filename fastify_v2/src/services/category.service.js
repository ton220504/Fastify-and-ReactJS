const getAll = async (db) => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM category WHERE isDelete = 0', (err, result) => {
      if (err) {
        reject(err);
        return;
      }
      resolve(result); // üõ† FIXED: Gi·ªù ƒë√¢y Promise s·∫Ω tr·∫£ v·ªÅ d·ªØ li·ªáu
    });
  });
};
const getAllIsDelete = async (db) => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM category WHERE isDelete = 1', (err, result) => {
      if (err) {
        reject(err);
        return;
      }
      resolve(result); // üõ† FIXED: Gi·ªù ƒë√¢y Promise s·∫Ω tr·∫£ v·ªÅ d·ªØ li·ªáu
    });
  });
};
const getOne = async (db, id) => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM category WHERE id = ?', [id], (err, result) => {
      if (err) {
        reject(err);
        return;
      }
      if (result.length === 0) {  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        resolve(null);
        return;
      }
      resolve(result[0]);  // Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n n·∫øu c√≥ d·ªØ li·ªáu
    });
  });
};
const createCategory = async (db, name) => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM category WHERE LOWER(name) = LOWER(?)', [name], (err, results) => {
      if (err) {
        reject(err);
        return;
      }

      if (results.length > 0) {
        // N·∫øu ƒë√£ t·ªìn t·∫°i brand
        reject(new Error('category already exists'));
        return;
      }

      // N·∫øu ch∆∞a c√≥ th√¨ insert
      db.query('INSERT INTO category (name) VALUES (?)', [name], (err, result) => {
        if (err) {
          reject(err);
          return;
        }
        resolve({ id: result.insertId, name });
      });
    });
  });
};
const updateCategory = async (db, id, name) => {
  return new Promise((resolve, reject) => {
    // Ki·ªÉm tra xem brand ƒë√£ t·ªìn t·∫°i (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    db.query('SELECT * FROM category WHERE LOWER(name) = LOWER(?)', [name], (err, results) => {
      if (err) {
        reject(err);
        return;
      }

      if (results.length > 0 && results[0].id != id) {
        // N·∫øu ƒë√£ c√≥ brand kh√°c v·ªõi id hi·ªán t·∫°i, b√°o l·ªói
        reject(new Error('category already exists'));
        return;
      }

      // N·∫øu kh√¥ng tr√πng th√¨ th·ª±c hi·ªán UPDATE
      db.query('UPDATE category SET name = ? WHERE id = ?', [name, id], (err, result) => {
        if (err) {
          reject(err);
          return;
        }

        if (result.affectedRows === 0) {
          resolve(null); // Kh√¥ng t√¨m th·∫•y brand ƒë·ªÉ update
          return;
        }

        resolve({ id, name });
      });
    });
  });
};

const deleteCategory = async (db, id) => {
  return new Promise((resolve, reject) => {
    db.query('DELETE FROM category WHERE id = ?', [id], (err, result) => {
      if (err) {
        reject(err);
        return;
      }
      if (result.affectedRows === 0) {
        resolve(null);
        return;
      }
      resolve({ message: 'category deleted successfully' });
    });
  });
};
const softDelete = async (db, id) => {
  return new Promise((resolve, reject) => {
    db.query(
      "UPDATE category SET isDelete = 1 WHERE id = ?",
      [id],
      (err, result) => {
        if (err) {
          console.error("‚ùå MySQL Soft Delete Error:", err);
          reject(err);
          return;
        }
        resolve(result);
      }
    );
  });
};
const restore = async (db, id) => {
  return new Promise((resolve, reject) => {
    db.query(
      "UPDATE category SET isDelete = 0 WHERE id = ?",
      [id],
      (err, result) => {
        if (err) {
          console.error("‚ùå MySQL Soft Delete Error:", err);
          reject(err);
          return;
        }
        resolve(result);
      }
    );
  });
};
module.exports = {
  getAll,
  getOne,
  createCategory,
  updateCategory,
  deleteCategory,
  getAllIsDelete,
  softDelete,
  restore
};
