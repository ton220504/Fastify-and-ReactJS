// import React from 'react'
// import { Link } from 'react-router-dom'

// const Callback = () => {
//   return (
//     <div style={{height:"300px"}}>
//         <h2>ƒê·∫∑t h√†ng th√†nh c√¥ng !</h2>
//         <p>Ti·∫øp t·ª•c mua h√†ng</p>
//         <Link to={"/ca-nhan"}><p>Xem th√¥ng tin ƒë∆°n h√†ng</p></Link>
//     </div>
//   )
// }

// export default Callback
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import axios from 'axios';

const Callback = () => {
    const navigate = useNavigate();
    useEffect(() => {
        console.log("Callback useEffect run");

        const processOrder = async () => {
            console.log("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë∆°n h√†ng MoMo");

            const orderData = JSON.parse(localStorage.getItem("orderInfo"));
            const isProcessed = localStorage.getItem("orderProcessed");

            if (!orderData || isProcessed === "true") {
                return; // ƒê√£ x·ª≠ l√Ω r·ªìi ho·∫∑c kh√¥ng c√≥ ƒë∆°n h√†ng
            }

            try {
                // ‚úÖ ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ngay t·ª´ ƒë·∫ßu ƒë·ªÉ ch·ªëng double submit
                localStorage.setItem("orderProcessed", "true");

                // 1. G·ª≠i ƒë∆°n h√†ng
                const res = await axios.post(`http://127.0.0.1:3000/api/orders`, orderData);

                // 2. Tr·ª´ t·ªìn kho
                await Promise.all(orderData.items.map(item =>
                    axios.put(`http://localhost:3000/api/products/${item.product_id}/stock`, {
                        stock_quantity: item.quantity
                    })
                ));

                // 3. X√≥a kh·ªèi gi·ªè h√†ng n·∫øu c√≥
                const cartItemIds = orderData.items.reduce((acc, item) => {
                    if (item.fromCart && item.cartItemId) {
                        acc.push(item.cartItemId);
                    } else if (item.fromCart && !item.cartItemId) {
                        console.warn("‚ö†Ô∏è item.fromCart nh∆∞ng thi·∫øu cartItemId:", item);
                    }
                    return acc;
                }, []);

                if (cartItemIds.length > 0) {
                    await Promise.all(
                        cartItemIds.map(id =>
                            axios.delete(`http://127.0.0.1:3000/api/cartsItem/${id}`)
                                .catch(err => {
                                    console.error(`‚ùå L·ªói x√≥a cartItem ${id}`, err);
                                })
                        )
                    );
                    console.log("üóëÔ∏è ƒê√£ x√≥a c√°c item kh·ªèi gi·ªè h√†ng");
                }

                // 4. X√≥a localStorage t·∫°m th·ªùi
                localStorage.removeItem("orderInfo");
                localStorage.removeItem("orderProcessed");

                // 5. Hi·ªÉn th·ªã th√†nh c√¥ng
                Swal.fire({
                    icon: 'success',
                    title: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!',
                    text: 'ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y t·ªõi!',
                    showCancelButton: true,
                    confirmButtonText: 'Ti·∫øp t·ª•c mua h√†ng',
                    cancelButtonText: 'Tho√°t'
                }).then((result) => {
                    if (result.isConfirmed) {
                        navigate("/tat-ca-san-pham");
                    } else {
                        navigate("/");
                    }
                });
            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng MoMo:", error);
            }
        };

        processOrder();
    }, [navigate]);


    return (
        <div style={{ height: "300px", marginTop:"10px", justifyItems:"center", alignContent:"center" }}>
            <h1>ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng...</h1>
            <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t.</p>
        </div>
    );
};

export default Callback;
